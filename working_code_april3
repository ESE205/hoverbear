#include <Servo.h>

const int servoPin = 6;
const int rightTrig = 7;
const int rightEcho = 8;
const int leftTrig = 9;
const int leftEcho = 10;
unsigned long duration, durationL, durationR, cm, inches;
boolean leftError, rightError, turnDir;
unsigned long delta = 0;
const int interval = 1500;

Servo servo;

int servoAngle = 0;

void setup()
{
  Serial.begin(9600);

  pinMode(leftTrig, OUTPUT);
  pinMode(leftEcho, INPUT);
  pinMode(rightTrig, OUTPUT);
  pinMode(rightEcho, INPUT);

  servo.attach(servoPin);

  //This line is to set the servo motor to it's middle position, since it isn't able to rotate in the negative direction.
  servoWrite(90);
}

void loop() {
  if (millis() > delta) // delta timing yay          probably not needed in the final code, but while the code is still being worked on not having debug info be fired out at hundreds of lines a second is nice
  {
    calcDistance(); // calculates the distance the nearest barrier in centimeters and inches
    if (obstacle()) // checks for obstacles, and if an obstacle if found, goes through the turning procedure
    {
      turnCheck();
    }
    readOut(); // debug info about the ultrasonic distance sensor readouts. serves no other purpose
    delta += interval; //more delta timing
  }
}

void calcDistance() // calculates the distance the nearest barrier in centimeters and inches
{
  digitalWrite(leftTrig, LOW);
  delayMicroseconds(5);
  digitalWrite(leftTrig, HIGH);
  delayMicroseconds(10);
  digitalWrite(leftTrig, LOW);

  // Read the signal from the sensor: a HIGH pulse whose
  // duration is the time (in microseconds) from the sending
  // of the ping to the reception of its echo off of an object.
  pinMode(leftEcho, INPUT);
  durationL = pulseIn(leftEcho, HIGH);

  digitalWrite(rightTrig, LOW);
  delayMicroseconds(5);
  digitalWrite(rightTrig, HIGH);
  delayMicroseconds(10);
  digitalWrite(rightTrig, LOW);

  pinMode(rightEcho, INPUT);
  durationR = pulseIn(rightEcho, HIGH);

  if (durationL < durationR)
  {
    duration = durationL;
  }
  else
  {
    duration = durationR;
  }

  //randomnerdtutorials.com code begins here
  // Convert the time into a distance
  cm = (duration / 2) / 29.1;   // Divide by 29.1 or multiply by 0.0343
  inches = (duration / 2) / 74; // Divide by 74 or multiply by 0.0135
  //randomnerdtutorials.com code ends here
  //https://randomnerdtutorials.com/complete-guide-for-ultrasonic-sensor-hc-sr04/
}

boolean obstacle() //checks for obstacles
{
  if (cm < 20)
  {
    Serial.println("There is an obstacle");
    Serial.println(cm);
    return true;
  }
  else
  {
    Serial.println("There is no obstacle");
    return false;
  }
}

int pickASide() // decides which direction the drone will turn
{
  if (durationL < durationR)
  {
    turnDir = true;
    return durationL;
  }
  else
  {
    turnDir = false;
    return durationR;
  }
}

void turnCheck() // makes sure that there were no errors in the selection of turn direction and actually calls the turn direction, could probably be combined with pickASide
{
  int readVal = pickASide();
  if (turnDir)
  {
    if (readVal > 800)
    {
      leftError = true;
    }
    else
    {
      leftError = false;
      turnLeft();
      return;
    }
  }
  else
  {
    if (readVal > 800)
    {
      rightError = true;
    }
    else
    {
      rightError = false;
      turnRight();
      return;
    }
  }
  if (true)
  {
    if ((rightError == true) || (leftError == true))
    {
      Serial.println("An error has occured with the turn direction choice mechanism. An arbitrary direction will be selected.");
    }
    else
    {
      Serial.println("This message shouldn't ever appear, so if it did, you done fricked up. An arbitrary directions will be selected.");
    }
    turnRight();
  }
}

void turnLeft() // initiates left turn
{
  servoWrite(0);
  Serial.println("Turning left!");
  turning();
}

void turnRight() // initiates right turn
{
  servoWrite(180);
  Serial.println("Turning right!");
  turning();
}

void turning() // keeps the drone turning until there is no obstacle in the way, then returns the drone to going straight
{
  while (obstacle())
  {
    calcDistance();
  }
  servoWrite(90);
}

void readOut() // usds debug info yay
{
  Serial.print("Distance in inches: ");
  Serial.println(inches);
  Serial.print("Distance in centimeters: ");
  Serial.println(cm);
}

void servoWrite(int angle) // because if there's a function that tracks what angle the servo motor is at, I don't know what it is
{
  servo.write(angle);
  servoAngle = angle;
  Serial.print("Rotating to ");
  Serial.print(angle);
  Serial.println(" degrees.");
}
